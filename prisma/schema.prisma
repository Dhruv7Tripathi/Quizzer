generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  image        String
  createdAt    DateTime      @default(now())
  provider     Provider
  options      Option[]      @relation("UserOptions")
  questions    Question[]    @relation("UserQuestions")
  quizzes      Quiz[]        @relation("UserQuizzes")
  quizAttempts QuizAttempt[] @relation("UserAttempts")
}

model Quiz {
  id              String        @id @default(uuid())
  title           String
  description     String
  category        String
  difficultyLevel String
  published       Boolean       @default(false)
  userId          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  questions       Question[]    @relation("QuizQuestions")
  user            User?         @relation("UserQuizzes", fields: [userId], references: [id])
  attempts        QuizAttempt[] @relation("QuizAttempts")

  @@index([userId])
}

model Question {
  id          String       @id @default(uuid())
  text        String
  quizId      String
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String?
  options     Option[]     @relation("QuestionOptions")
  quiz        Quiz         @relation("QuizQuestions", fields: [quizId], references: [id], onDelete: Cascade)
  user        User?        @relation("UserQuestions", fields: [userId], references: [id])
  quizAnswers QuizAnswer[] @relation("QuestionAnswers")

  @@index([quizId])
}

model Option {
  id          String       @id @default(uuid())
  text        String
  isCorrect   Boolean      @default(false)
  questionId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String?
  question    Question     @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  user        User?        @relation("UserOptions", fields: [userId], references: [id])
  quizAnswers QuizAnswer[] @relation("OptionAnswers")

  @@index([questionId])
}

model QuizAttempt {
  id             String       @id @default(uuid())
  quizId         String
  userId         String
  score          Int
  totalQuestions Int
  isCompleted    Boolean      @default(false)
  completedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  answers        QuizAnswer[] @relation("AttemptAnswers")
  quiz           Quiz         @relation("QuizAttempts", fields: [quizId], references: [id])
  user           User         @relation("UserAttempts", fields: [userId], references: [id])

  @@index([quizId])
  @@index([userId])
}

model QuizAnswer {
  id               String      @id @default(uuid())
  attemptId        String
  isCorrect        Boolean
  questionId       String
  selectedOptionId String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  attempt          QuizAttempt @relation("AttemptAnswers", fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question    @relation("QuestionAnswers", fields: [questionId], references: [id])
  selectedOption   Option      @relation("OptionAnswers", fields: [selectedOptionId], references: [id])

  @@index([attemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}

enum Provider {
  Google
}
